import { Box, Heading, VStack, Text, Button, useToast, Checkbox, HStack, Accordion, AccordionItem, AccordionButton, AccordionIcon, AccordionPanel } from '@chakra-ui/react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useState } from 'react'
import { useGlobalState } from '../state';
import { PersonData, PhysicalStatus } from '../types';
import format from 'date-fns/format'
import differenceInYears from 'date-fns/differenceInYears'

const isSenior = (dob) => {
	const d = new Date(parseInt(dob as unknown as string));
	const difference = differenceInYears(Date.now(), d);
	return difference > 65;
}

function AdminPage() {
	const [people, setPeople] = useState<(PersonData&{address: string, incentiveAmount: number}) []>([]);
	const [peopleCount, setPeopleCount] = useState<number | null>(null);
	const [bankBalance, setBankBalance] = useState<number | null>(null);
	const {drizzle, isAdmin} = useGlobalState();
	const router = useRouter();
	const toast = useToast()

	const fetchData = async () => {
		const peopleCount = await drizzle.contracts.Validator.methods.peopleCount().call()
		const bankBalance = await drizzle.contracts.Validator.methods.bankBalance().call()
		setPeopleCount(peopleCount)
		console.log(peopleCount)
		setBankBalance(bankBalance)
		let promisedAddresses = []
		for (let i = 0; i < peopleCount; i++) {
			promisedAddresses.push(drizzle.contracts.Validator.methods.peopleAddress(i+1).call());
		}
		const addresses = await Promise.all(promisedAddresses)
		const promisedPeople = addresses.map(address => drizzle.contracts.Validator.methods.people(address).call());
		const promisedDetails = addresses.map(address => drizzle.contracts.Validator.methods.peopleDetails(address).call());
		const promisedIncentiveAmount =  addresses.map(address => drizzle.contracts.Validator.methods.isEligible(address).call());
		const people = await Promise.all(promisedPeople);
		const details = await Promise.all(promisedDetails);
		const incentivesAmount = await Promise.all(promisedIncentiveAmount);
		const data = people.map((people, i) => ({...people, ...details[i], address: addresses[i], incentiveAmount: incentivesAmount[i] }))
		setPeople(data);
	}

	const verifyPerson = async (address: string) => {
		await drizzle.contracts.Validator.methods.verifyPerson(address).send();
		setPeople(prev => prev.map((data) => {
			if (data.address === address) {
				return {...data, verified: true}
			}
			return data
		}))
		toast({
			title: "Person Verified",
			description: "We have verified the person.",
			status: "success",
			duration: 9000,
			isClosable: true,
		})
	}


	const unVerifyPerson = async (address: string) => {
		await drizzle.contracts.Validator.methods.unVerifyPerson(address).send();
		setPeople(prev => prev.map((data) => {
			if (data.address === address) {
				return {...data, verified: false}
			}
			return data
		}))
		toast({
			title: "Person unverified",
			description: "We have unverified the person.",
			status: "warning",
			duration: 9000,
			isClosable: true,
		})
	}
	
	const transferBenefits = async (address: string) => {
		await drizzle.contracts.Validator.methods.transferBenefits(address).send();
		toast({
			title: "Incentive Transferred",
			description: "We have transferred the incentive money to the person.",
			status: "success",
			duration: 3000,
			isClosable: true,
		})
		await fetchData()
	}

	React.useEffect(() => {
		if (!isAdmin) {
      router.push('/');
			return;
		}
		fetchData();
	}, []);

	const places = [
		{ pinCode: 560001, name: 'Banglore', },
		{pinCode: 570004, name: 'Mysore'}, {pinCode: 571441, name: 'Chandagalu'}]

	const aggregatedData = places.map(({pinCode, name}) => {
		const filteredByPinCode = people.filter(({pinCode: code}) => parseInt(code as unknown as string) === pinCode)
		return {
			pinCode,
			filteredByPinCode,
			name,
			fullyChallenged: filteredByPinCode.filter(({pinCode: code, medicalCondition}) =>  medicalCondition === PhysicalStatus.COMPLETELY_PHYSICALLY_CHALLENGED),
			partiallyChallenged: filteredByPinCode.filter(({pinCode: code, medicalCondition}) => medicalCondition === PhysicalStatus.PARTIALLY_PHYSICALLY_CHALLENGED),
			seniorCitizens: filteredByPinCode.filter(({pinCode: code, dob}) => isSenior(dob)),
		}
	});

	return (
		<>
			<Head>
        <title>Dashboard | Crypto Validator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
		<Box maxW="1400px" w="90%" m="0 auto">
			<Heading>Dashboard: Total Entries - {peopleCount} <br /> Bank account balance - {bankBalance}</Heading>
			<Box my={5}>


			{aggregatedData.map(({pinCode, name, seniorCitizens, partiallyChallenged, fullyChallenged, filteredByPinCode}) => 
				<Accordion allowMultiple mt={0}>
				<AccordionItem>
				<h2>
						<AccordionButton>
							<Box flex="1" textAlign="left">
								Aggregated Data for {name}, {pinCode} - {filteredByPinCode.length}
							</Box>
							<AccordionIcon />
						</AccordionButton>
					</h2>
					<AccordionPanel pb={4}>
						<Box>
							<Text>Total Number of Beneficiaries : {filteredByPinCode.length}</Text>
							<Text>Total Number of Fully Challenged Beneficiaries: {fullyChallenged.length}</Text>
							<Text>Total Number of Partially Challenged Beneficiaries: {partiallyChallenged.length}</Text>
							<Text>Total Number of Senior Citizens: {seniorCitizens.length}</Text>
						</Box>
					</AccordionPanel>	
				</AccordionItem>
			</Accordion>
			)}
			
			</Box>
			
			<VStack spacing={4} mt={8}>
				{
					people.map((data) =>  {
						let dob = data.dob;
						if (typeof dob === 'string') {
							dob = parseInt(dob);
						}
					return (
					<VStack w="90%" maxW="700px" bg="gray.100" alignItems='left' p={4} borderRadius="sm" key={data.firstName}>
							<Heading size="sm">Name: {data.firstName} {data.lastName}</Heading>
							<Text>Email - {data.email}</Text>
							<Text>Education - {data.educationQualification}</Text>	
							<Text>Income - {data.income}</Text>	
							<Text>Date of Birth - {format(dob, 'MMM dd,YYY')}</Text>
							{/* @ts-expect-error */}
							<Text>Medical Status - {PhysicalStatus[parseInt(data.medicalCondition)]}</Text>
							<Text fontWeight="bold">{data.incentiveAmount && <>
								<Checkbox isChecked={!!data.incentiveAmount}>Eligible for incentive: â‚¹ {data.incentiveAmount}</Checkbox>
						</>} {' '}
						{/* @ts-expect-error Incentive amt */}
						{parseInt(data.incentiveAmount) ? isSenior(dob) ? '(Senior Citizen)' : '(Physical Condition)' : '(Not Eligible)'}
						</Text>
							<Checkbox isChecked={data.verified}>Verified</Checkbox>
							<Checkbox isChecked={data.benefitsTransferred}>Benefits Transferred</Checkbox>
							<HStack>
							<Button width="100%" onClick={() => data.verified ? unVerifyPerson(data.address) : verifyPerson(data.address)} colorScheme="blue">{data.verified ? 'Unverify': 'Verify'}</Button>
							<Button width="100%" isDisabled={!data.verified||data.benefitsTransferred} onClick={() => transferBenefits(data.address)} colorScheme="blue">{data.verified ? !data.benefitsTransferred ? 'Transfer Benefits': 'Benefits transferred.' : 'Verify the person to transfer benefits.'}</Button>
							</HStack>
						</VStack>)}
					)
				}
			</VStack>
		</Box>
		</>
	)
}

export default AdminPage
